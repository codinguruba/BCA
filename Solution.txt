What is JDBC:
JDBC (Java Database Connectivity) is a Java API that provides a standard set of APIs for accessing databases. 
It allows Java applications to connect to a wide range of databases and execute SQL statements, and process the results.

There are four types of JDBC drivers:

Type 1 JDBC Driver (JDBC-ODBC Bridge Driver): This driver uses the ODBC driver to connect to the database. It is the simplest and oldest type of JDBC driver and provides the least performance.
Type 2 JDBC Driver (Native-API/Partly Java Driver): This driver translates JDBC calls into native calls to the database API. It is faster than the Type 1 driver, but it is specific to the underlying database and can be platform-dependent.
Type 3 JDBC Driver (Network Protocol Driver): This driver communicates with the database through a network protocol, typically a database-independent middleware. It provides better performance than the Type 1 and Type 2 drivers.
Type 4 JDBC Driver (Pure Java Driver): This driver is implemented entirely in Java and communicates directly with the database. It provides the best performance and is the preferred driver for accessing databases from Java applications.



1)Write a JDBC program to display all records from a table / Write a JDBC program to show use of result set//
Write a program to show the use of JDBC.

import java.sql.*;

public class Tutorial1 {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/football";
        String uname = "root";
        String pwd = "";
        
        
        try {
            //Load Driver//
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(url,uname,pwd);
            Statement st = con.createStatement();
            String sql = "select * from player ";
            ResultSet rs = st.executeQuery(sql);
      
            while(rs.next()){
                System.out.println(rs.getString("name"));
                System.out.println(rs.getString("address"));
                System.out.println(rs.getString("club"));
            }
            //connection close//
            con.close();
               
        } 
        catch (Exception ex) {
            System.out.println(ex);
        }
                 
    }
}

// WAP a java program to check palindrome or not

import java.util.Scanner;

public class Palindrome {
    public static void main(String[] args) {
        int rem , rev = 0 , temp;
        System.out.println("Enter a number:");
        Scanner ob = new Scanner(System.in);
        int number = ob.nextInt();
        temp = number;
       
        
        while(number>0){
            rem = number%10;
            rev = (rev*10)+rem;
            number = number/10;
            
        }
        
        if(temp==rev){
            System.out.println("Palindrome");
        }
        else{
            System.out.println("Not a palindrome");
        }
        
       
    }
    
}

What are access modifiers in JAVA with example 
Access modifiers in Java are keywords used to control the access to the members of a class. The access level can be set for instance variables, methods, and constructors, and it determines whether these members can be accessed from other parts of the program.

There are four types of access modifiers in Java:

Public: Members declared as public can be accessed from anywhere in the program.
Private: Members declared as private can only be accessed within the same class. They cannot be accessed from outside the class.
Protected: Members declared as protected can be accessed within the same class and its subclasses. They cannot be accessed from outside the package.
Default (also known as package-private): Members declared without an access modifier have default access. They can only be accessed within the same package.

The access level can be used to hide the implementation details of a class and to restrict access to its members.
By using access modifiers, you can encapsulate the data and behavior of a class and create a stable and robust interface for using the class.

Write a program to show exception handling

public class ArithmeticExceptionExample {
   public static void main(String[] args) {
      try {
         int numerator = 10;
         int denominator = 0;
         int result = numerator / denominator;
         System.out.println("The result is: " + result);
      } catch (ArithmeticException e) {
         System.out.println("An arithmetic exception occurred: " + e.getMessage());
      }
   }
}
